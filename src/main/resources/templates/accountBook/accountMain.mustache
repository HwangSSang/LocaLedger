<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>가계부</title>
    <style>
        body {
            font-family: 'Malgun Gothic', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background-color: #f0f2f5;
            min-height: 100vh;
        }

        /* 전체 콘텐츠를 감싸는 컨테이너 */
        .page-container {
            display: flex;
            gap: 20px;
            width: 90%;
            max-width: 1400px; /* 전체 너비를 더 넓게 */
            margin-bottom: 20px;
            justify-content: center;
            align-items: flex-start; /* 상단 정렬 */
        }

        /* 입력 폼 섹션 */
        .input-form-container {
            display: flex;
            flex-direction: column; /* 수입/지출 폼을 세로로 정렬 */
            gap: 20px;
            flex: 0 0 350px; /* 입력 폼 컨테이너의 고정 너비 (달력 옆에 붙도록) */
            max-width: 350px;
        }

        .input-section {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 100%; /* 부모 컨테이너에 꽉 차게 */
            box-sizing: border-box;
        }
        .input-section h3 {
            margin-top: 0;
            color: #333;
            text-align: center;
            margin-bottom: 20px;
        }
        .input-section div {
            margin-bottom: 15px;
        }
        .input-section label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }
        .input-section input[type="text"],
        .input-section input[type="number"] {
            width: calc(100% - 22px);
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 1rem;
            color: black;
        }
        .input-section input::placeholder {
            color: #888;
        }
        .input-section input[type="radio"] {
            margin-right: 5px;
        }
        .input-section .radio-group label {
            display: inline-block;
            margin-right: 15px;
            font-weight: normal;
        }
        .input-section button {
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            width: 100%;
            margin-top: 10px;
        }
        .income-input button {
            background-color: #28a745;
        }
        .income-input button:hover {
            background-color: #218838;
        }
        .expense-input button {
            background-color: #dc3545;
        }
        .expense-input button:hover {
            background-color: #c82333;
        }

        /* 달력 섹션 스타일 */
        .calendar-section {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            flex: 1; /* 남은 공간을 최대한 차지 */
            min-width: 600px; /* 달력 최소 너비 */
            box-sizing: border-box;
            text-align: center;
            display: flex; /* 내부 요소 (헤더, 그리드)를 flex로 정렬 */
            flex-direction: column; /* 세로 정렬 */
        }
        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            font-size: 1.5rem; /* 헤더 폰트 크기 키움 */
            font-weight: bold;
            color: #333;
        }
        .calendar-header button {
            background: none;
            border: none;
            font-size: 2rem; /* 버튼 폰트 크기 키움 */
            cursor: pointer;
            color: #555;
            padding: 5px 10px;
        }
        .calendar-header button:hover {
            color: #000;
        }
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            flex: 1; /* 남은 세로 공간을 채우도록 */
            gap: 2px; /* 칸 사이 간격 줄임 */
            font-size: 0.95rem;
            border: 1px solid #ddd; /* 전체 그리드 테두리 */
        }
        .calendar-grid .day-name {
            font-weight: bold;
            color: #777;
            padding: 10px 0; /* 패딩 늘림 */
            background-color: #f8f8f8;
            border-bottom: 1px solid #ddd; /* 요일 아래 구분선 */
        }
        /* 각 날짜 칸 내부 스타일 변경 - 이 부분이 핵심적으로 조정됩니다. */
        .calendar-grid .day {
            padding: 5px;
            border: 1px solid #eee; /* 칸 구분을 위한 테두리 */
            border-radius: 0; /* 테두리 둥글기 제거 */
            cursor: pointer;
            transition: background-color 0.2s;
            display: flex;
            flex-direction: column;
            /* align-items: flex-start;  // 이 부분을 제거하거나 주석 처리 */
            min-height: 100px; /* 각 날짜 칸의 최소 높이 지정 (스크린샷처럼) */
            box-sizing: border-box;
            text-align: left; /* 내부 텍스트 기본 정렬을 왼쪽으로 */
            /* align-items: center; // 이미 flex-direction: column 이므로 텍스트 좌우 정렬을 위해 삭제 */
        }
        .calendar-grid .day:hover {
            background-color: #e6e6e6;
        }
        .calendar-grid .day.current-day {
            background-color: #007bff;
            color: white;
            font-weight: bold;
        }
        .calendar-grid .day.current-day .day-num,
        .calendar-grid .day.current-day .income-label,
        .calendar-grid .day.current-day .expense-label,
        .calendar-grid .day.current-day .income-amount-display,
        .calendar-grid .day.current-day .expense-amount-display {
            color: white;
        }
        .calendar-grid .day.other-month {
            color: #bbb;
            background-color: #f0f0f0;
            border: 1px solid #f0f0f0;
        }

        /* 날짜 숫자 스타일 */
        .day-num {
            font-weight: bold;
            font-size: 1.1rem;
            margin-bottom: 5px;
            color: #333;
            width: 100%; /* 좌측 정렬을 위해 너비 100% */
            text-align: left; /* 좌측 정렬 */
        }

        /* 수입/지출 레이블 및 금액 표시 영역 스타일 */
        .income-row, .expense-row {
            display: flex;
            justify-content: flex-start; /* 좌측 정렬 */
            align-items: center;
            width: 100%;
            margin-bottom: 2px; /* 간격 */
        }
        .income-label, .expense-label {
            font-size: 0.8rem;
            margin-right: 5px;
            font-weight: bold;
            color: #555;
        }
        .income-amount-display, .expense-amount-display {
            font-size: 0.8rem;
            color: #333; /* 기본 텍스트 색상 */
            flex-grow: 1; /* 남은 공간 채우기 */
            text-align: right; /* 금액은 우측 정렬 */
        }
        .income-amount-display {
            color: #28a745; /* 수입은 초록색 */
        }
        .expense-amount-display {
            color: #dc3545; /* 지출은 빨간색 */
        }

        /* 이번 달 총 수입/지출 요약 섹션 */
        .summary-section {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 90%;
            max-width: 1400px; /* 전체 컨테이너와 동일한 너비 */
            margin-top: 20px;
            display: flex;
            justify-content: space-around;
            align-items: center;
            font-size: 1.2rem;
            font-weight: bold;
            color: #333;
        }
        .summary-item span {
            color: #007bff; /* 금액 강조 */
            margin-left: 10px;
        }

        /* 저장 메시지 스타일 */
        .success-message {
            background-color: #d4edda; /* 연한 초록색 배경 */
            color: #155724; /* 진한 초록색 텍스트 */
            border: 1px solid #c3e6cb;
            border-radius: 5px;
            padding: 10px 20px;
            margin-top: 10px; /* 상단 여백 */
            text-align: center;
            font-weight: bold;
            width: fit-content; /* 내용에 맞게 너비 조절 */
            position: fixed; /* 화면 상단에 고정 */
            top: 20px;
            right: 20px;
            z-index: 1000; /* 다른 요소 위에 표시 */
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            opacity: 0; /* 초기에는 투명하게 */
            animation: fadeinout 4s forwards; /* 애니메이션 적용 */
        }

        @keyframes fadeinout {
            0% { opacity: 0; transform: translateY(-20px); }
            10% { opacity: 1; transform: translateY(0); }
            90% { opacity: 1; transform: translateY(0); }
            100% { opacity: 0; transform: translateY(-20px); }
        }
    </style>
</head>
<body>

{{#message}}
    <div class="success-message">{{message}}</div>
{{/message}}

<div class="page-container">
    <div class="calendar-section">
        <div class="calendar-header">
            <button id="prevMonth">&lt;</button>
            <span id="currentMonthYear"></span>
            <button id="nextMonth">&gt;</button>
        </div>
        <div class="calendar-grid" id="calendarGrid">
            <div class="day-name">일</div>
            <div class="day-name">월</div>
            <div class="day-name">화</div>
            <div class="day-name">수</div>
            <div class="day-name">목</div>
            <div class="day-name">금</div>
            <div class="day-name">토</div>
        </div>
    </div>

    <div class="input-form-container">
        <div class="input-section income-input">
            <h3>수입 입력</h3>
            <form action="/income/add" method="post">
                <div>
                    <label for="income-content">내용</label>
                    <input type="text" id="income-content" name="incomeContent" placeholder="예: 월급, 용돈">
                </div>
                <div>
                    <label for="income-amount">금액</label>
                    <input type="number" id="income-amount" name="incomeAmount" placeholder="예: 500000">
                </div>
                <button type="submit">저장</button>
            </form>
        </div>

        <div class="input-section expense-input">
            <h3>지출 입력</h3>
            <form action="/expense/add" method="post">
                <div class="radio-group">
                    <input type="radio" id="online-expense" name="expenseType" value="온라인" {{#isOnlineExpense}}checked{{/isOnlineExpense}}>
                    <label for="online-expense">온라인</label>
                    <input type="radio" id="offline-expense" name="expenseType" value="오프라인" {{#isOfflineExpense}}checked{{/isOfflineExpense}}>
                    <label for="offline-expense">오프라인</label>
                </div>
                <div>
                    <label for="shop-name">상호명</label>
                    <input type="text" id="shop-name" name="shopName" placeholder="예: 쿠팡, 이마트">
                </div>
                <div>
                    <label for="item-name">구매품목</label>
                    <input type="text" id="item-name" name="itemName" placeholder="예: 생필품, 식료품">
                </div>
                <div>
                    <label for="expense-amount">금액</label>
                    <input type="number" id="expense-amount" name="expenseAmount" placeholder="예: 25000">
                </div>
                <button type="submit">저장</button>
            </form>
        </div>
    </div>
</div>

<div class="summary-section">
    <div class="summary-item">이번 달 총 수입: <span>1,000,000,000원</span></div>
    <div class="summary-item">총 지출: <span>1,000,000,000원</span></div>
</div>

<script>
    const calendarGrid = document.getElementById('calendarGrid');
    const currentMonthYearSpan = document.getElementById('currentMonthYear');
    const prevMonthButton = document.getElementById('prevMonth');
    const nextMonthButton = document.getElementById('nextMonth'); // 이 부분 const로 선언되어야 함

    let currentMonth = new Date();

    function renderCalendar() {
        const dayNamesHtml = `
            <div class="day-name">일</div>
            <div class="day-name">월</div>
            <div class="day-name">화</div>
            <div class="day-name">수</div>
            <div class="day-name">목</div>
            <div class="day-name">금</div>
            <div class="day-name">토</div>
        `;
        calendarGrid.innerHTML = dayNamesHtml;

        const year = currentMonth.getFullYear();
        const month = currentMonth.getMonth();
        const today = new Date();

        const firstDayOfMonth = new Date(year, month, 1);
        const startDayOfWeek = firstDayOfMonth.getDay();

        const startDate = new Date(firstDayOfMonth);
        startDate.setDate(firstDayOfMonth.getDate() - startDayOfWeek);

        currentMonthYearSpan.textContent = `${year}년 ${month + 1}월`;

        let dayCounter = new Date(startDate);

        for (let i = 0; i < 42; i++) { // 6주 * 7일 = 42개 칸
            const dayDiv = document.createElement('div');
            dayDiv.classList.add('day');

            // 날짜 숫자 표시 영역
            const dayNumSpan = document.createElement('span');
            dayNumSpan.classList.add('day-num');
            dayNumSpan.textContent = dayCounter.getDate();
            dayDiv.appendChild(dayNumSpan);

            // 수입/지출 레이블 및 금액 표시 영역
            const incomeRow = document.createElement('div');
            incomeRow.classList.add('income-row');
            // 여기서는 금액을 빈칸으로 두어 나중에 실제 데이터를 채울 수 있도록 함
            incomeRow.innerHTML = '<span class="income-label">수입</span><span class="income-amount-display"></span>';
            dayDiv.appendChild(incomeRow);

            const expenseRow = document.createElement('div');
            expenseRow.classList.add('expense-row');
            // 여기서는 금액을 빈칸으로 두어 나중에 실제 데이터를 채울 수 있도록 함
            expenseRow.innerHTML = '<span class="expense-label">지출</span><span class="expense-amount-display"></span>';
            dayDiv.appendChild(expenseRow);

            // 날짜 스타일링 (현재 월, 오늘 날짜, 다른 달)
            if (dayCounter.getMonth() !== month) {
                dayDiv.classList.add('other-month');
            }

            if (dayCounter.getFullYear() === today.getFullYear() &&
                    dayCounter.getMonth() === today.getMonth() &&
                    dayCounter.getDate() === today.getDate()) {
                dayDiv.classList.add('current-day');
            }

            // 날짜 클릭 이벤트 (여기서는 단순히 콘솔에 출력)
            dayDiv.addEventListener('click', () => {
                const clickedDate = `${dayCounter.getFullYear()}-${(dayCounter.getMonth() + 1).toString().padStart(2, '0')}-${dayCounter.getDate().toString().padStart(2, '0')}`;
                console.log('클릭한 날짜:', clickedDate);
            });

            calendarGrid.appendChild(dayDiv);

            dayCounter.setDate(dayCounter.getDate() + 1); // 다음 날짜로 이동
        }
    }

    // 이전 달 보기
    prevMonthButton.addEventListener('click', () => {
        currentMonth.setMonth(currentMonth.getMonth() - 1);
        renderCalendar();
    });

    // 다음 달 보기
    nextMonthButton.addEventListener('click', () => {
        currentMonth.setMonth(currentMonth.getMonth() + 1);
        renderCalendar();
    });

    // 페이지 로드 시 달력 렌더링
    document.addEventListener('DOMContentLoaded', renderCalendar);
</script>

</body>
</html>