<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>가계부</title>
    <style>
        body {
            font-family: 'Malgun Gothic', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            background-color: #f0f2f5;
            min-height: 100vh;
        }

        /* 전체 콘텐츠를 감싸는 컨테이너 */
        .page-container {
            display: flex;
            gap: 20px;
            width: 90%;
            max-width: 1400px;
            margin-bottom: 20px;
            justify-content: center;
            align-items: flex-start;
        }

        /* 입력 폼 섹션 */
        .input-form-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            flex: 0 0 350px;
            max-width: 350px;
        }

        .input-section {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 100%;
            box-sizing: border-box;
        }
        .input-section h3 {
            margin-top: 0;
            color: #333;
            text-align: center;
            margin-bottom: 20px;
        }
        .input-section div {
            margin-bottom: 15px;
        }
        .input-section label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }
        .input-section input[type="text"],
        .input-section input[type="number"] {
            width: calc(100% - 22px);
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 1rem;
            color: black;
        }
        .input-section input::placeholder {
            color: #888;
        }
        .input-section input[type="radio"] {
            margin-right: 5px;
        }
        .input-section .radio-group label {
            display: inline-block;
            margin-right: 15px;
            font-weight: normal;
        }
        .input-section button {
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            width: 100%;
            margin-top: 10px;
        }
        .income-input button {
            background-color: #28a745;
        }
        .income-input button:hover {
            background-color: #218838;
        }
        .expense-input button {
            background-color: #dc3545;
        }
        .expense-input button:hover {
            background-color: #c82333;
        }

        /* 달력 섹션 스타일 */
        .calendar-section {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            flex: 1;
            min-width: 600px;
            box-sizing: border-box;
            text-align: center;
            display: flex;
            flex-direction: column;
        }
        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
        }
        .calendar-header button {
            background: none;
            border: none;
            font-size: 2rem;
            cursor: pointer;
            color: #555;
            padding: 5px 10px;
        }
        .calendar-header button:hover {
            color: #000;
        }
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            flex: 1;
            gap: 2px;
            font-size: 0.95rem;
            border: 1px solid #ddd;
        }
        .calendar-grid .day-name {
            font-weight: bold;
            color: #777;
            padding: 10px 0;
            background-color: #f8f8f8;
            border-bottom: 1px solid #ddd;
        }
        /* 각 날짜 칸 내부 스타일 변경 */
        .calendar-grid .day {
            padding: 5px;
            border: 1px solid #eee;
            border-radius: 0;
            cursor: pointer;
            transition: background-color 0.2s;
            display: flex;
            flex-direction: column;
            min-height: 100px;
            box-sizing: border-box;
            text-align: left;
        }
        .calendar-grid .day:hover {
            background-color: #e6e6e6;
        }
        .calendar-grid .day.current-day {
            background-color: #007bff;
            color: white;
            font-weight: bold;
        }
        .calendar-grid .day.selected-day {
            background-color: #ffd700; /* 예시: 노란색 배경 */
            border: 2px solid #ffbf00; /* 예시: 더 진한 노란색 테두리 */
            box-shadow: 0 0 8px rgba(255, 215, 0, 0.5); /* 예시: 그림자 효과 */
            transform: scale(1.02); /* 예시: 살짝 커지는 효과 */
            transition: background-color 0.2s, border 0.2s, box-shadow 0.2s, transform 0.2s;
            z-index: 1; /* 다른 요소 위에 오도록 (선택 사항) */
            position: relative; /* transform 적용을 위해 (선택 사항) */
        }
        .calendar-grid .day.current-day .day-num,
        .calendar-grid .day.current-day .income-label,
        .calendar-grid .day.current-day .expense-label,
        .calendar-grid .day.current-day .income-amount-display,
        .calendar-grid .day.current-day .expense-amount-display {
            color: white;
        }
        .calendar-grid .day.other-month {
            color: #bbb;
            background-color: #f0f0f0;
            border: 1px solid #f0f0f0;
        }

        .day-num {
            font-weight: bold;
            font-size: 1.1rem;
            margin-bottom: 5px;
            color: #333;
            width: 100%;
            text-align: left;
        }

        .income-row, .expense-row {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            width: 100%;
            margin-bottom: 2px;
        }
        .income-label, .expense-label {
            font-size: 0.8rem;
            margin-right: 5px;
            font-weight: bold;
            color: #555;
        }
        .income-amount-display, .expense-amount-display {
            font-size: 0.8rem;
            color: #333;
            flex-grow: 1;
            text-align: right;
        }
        .income-amount-display {
            color: #28a745;
        }
        .expense-amount-display {
            color: #dc3545;
        }

        .summary-section {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            width: 90%;
            max-width: 1400px;
            margin-top: 20px;
            display: flex;
            justify-content: space-around;
            align-items: center;
            font-size: 1.2rem;
            font-weight: bold;
            color: #333;
        }
        .summary-item span {
            color: #007bff;
            margin-left: 10px;
        }

        .success-message {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
            border-radius: 5px;
            padding: 10px 20px;
            margin-top: 10px;
            text-align: center;
            font-weight: bold;
            width: fit-content;
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            opacity: 0;
            animation: fadeinout 4s forwards;
        }

        @keyframes fadeinout {
            0% { opacity: 0; transform: translateY(-20px); }
            10% { opacity: 1; transform: translateY(0); }
            90% { opacity: 1; transform: translateY(0); }
            100% { opacity: 0; transform: translateY(-20px); }
        }
    </style>
</head>
<body>

{{#message}}
    <div class="success-message">{{message}}</div>
{{/message}}

<div class="page-container">
    <div class="calendar-section">
        <div class="calendar-header">
            <button id="prevMonth">&lt;</button>
            <span id="currentMonthYear"></span>
            <button id="nextMonth">&gt;</button>
        </div>
        <div class="calendar-grid" id="calendarGrid">
            <div class="day-name">일</div>
            <div class="day-name">월</div>
            <div class="day-name">화</div>
            <div class="day-name">수</div>
            <div class="day-name">목</div>
            <div class="day-name">금</div>
            <div class="day-name">토</div>
        </div>
    </div>

    <div class="input-form-container">
        <div class="input-section income-input">
            <h3>수입 입력</h3>
            <form action="/income/add" method="post">
                <div>
                    <label for="income-content">내용</label>
                    <input type="text" id="income-content" name="incomeContent" placeholder="예: 월급, 용돈">
                </div>
                <div>
                    <label for="income-amount">금액</label>
                    <input type="number" id="income-amount" name="incomeAmount" placeholder="예: 500000">
                </div>
                <input type="hidden" id="selected-income-date" name="selectedDate">
                <button type="submit">저장</button>
            </form>
        </div>

        <div class="input-section expense-input">
            <h3>지출 입력</h3>
            <form action="/expense/add" method="post">
                <div class="radio-group">
                    <input type="radio" id="online-expense" name="expenseType" value="온라인" {{#isOnlineExpense}}checked{{/isOnlineExpense}}>
                    <label for="online-expense">온라인</label>
                    <input type="radio" id="offline-expense" name="expenseType" value="오프라인" {{#isOfflineExpense}}checked{{/isOfflineExpense}}>
                    <label for="offline-expense">오프라인</label>
                </div>
                <div>
                    <label for="shop-name">상호명</label>
                    <input type="text" id="shop-name" name="shopName" placeholder="예: 쿠팡, 이마트">
                </div>
                <div>
                    <label for="item-name">구매품목</label>
                    <input type="text" id="item-name" name="itemName" placeholder="예: 생필품, 식료품">
                </div>
                <div>
                    <label for="expense-amount">금액</label>
                    <input type="number" id="expense-amount" name="expenseAmount" placeholder="예: 25000">
                </div>
                <input type="hidden" id="selected-expense-date" name="selectedDate">
                <button type="submit">저장</button>
            </form>
        </div>
    </div>
</div>

<div class="summary-section">
    <div class="summary-item">이번 달 총 수입: <span id="monthlyTotalIncome">0원</span></div>
    <div class="summary-item">총 지출: <span id="monthlyTotalExpense">0원</span></div>
</div>

<script>
    const calendarGrid = document.getElementById('calendarGrid');
    const currentMonthYearSpan = document.getElementById('currentMonthYear');
    const prevMonthButton = document.getElementById('prevMonth');
    const nextMonthButton = document.getElementById('nextMonth');
    const monthlyTotalIncomeSpan = document.getElementById('monthlyTotalIncome');
    const monthlyTotalExpenseSpan = document.getElementById('monthlyTotalExpense');

    let currentMonth = new Date(); // 현재 달력을 그릴 기준 월
    let selectedDate = new Date(); // 초기 로드 시에는 오늘 날짜가 선택된 날짜로 강조되도록 설정

    // 숫자를 통화 형식으로 포맷팅 (예: 100000 -> 100,000원)
    function formatCurrency(amount) {
        return amount.toLocaleString('ko-KR') + '원';
    }

    // 특정 월의 수입/지출 데이터를 백엔드에서 가져오는 함수
    async function fetchMonthlyData(year, month) {
        try {
            // 월은 0부터 시작하므로 +1하여 전달
            const response = await fetch(`/api/ledger/monthly?year=${year}&month=${month + 1}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('월별 데이터 가져오기 실패:', error);
            return { incomes: [], expenses: [] }; // 오류 발생 시 빈 배열 반환
        }
    }

    // 달력 렌더링 함수
    async function renderCalendar() {
        // 기존 달력 내용을 날짜 이름으로 초기화
        const dayNamesHtml = `
            <div class="day-name">일</div>
            <div class="day-name">월</div>
            <div class="day-name">화</div>
            <div class="day-name">수</div>
            <div class="day-name">목</div>
            <div class="day-name">금</div>
            <div class="day-name">토</div>
        `;
        calendarGrid.innerHTML = dayNamesHtml;

        const year = currentMonth.getFullYear();
        const month = currentMonth.getMonth(); // 0부터 시작 (0:1월, 1:2월...)

        currentMonthYearSpan.textContent = `${year}년 ${month + 1}월`;

        const firstDayOfMonth = new Date(year, month, 1);
        const startDayOfWeek = firstDayOfMonth.getDay(); // 0:일, 1:월, ... 6:토

        const startDate = new Date(firstDayOfMonth);
        startDate.setDate(firstDayOfMonth.getDate() - startDayOfWeek); // 달력 시작 일요일로 맞추기

        // 월별 데이터 미리 불러오기
        const monthlyData = await fetchMonthlyData(year, month);
        const incomesByDay = {}; // 날짜별 수입 합계
        const expensesByDay = {}; // 날짜별 지출 합계

        // 날짜별로 데이터 집계
        monthlyData.incomes.forEach(income => {
            const date = income.incomeDate.split('T')[0]; // YYYY-MM-DD 형식
            if (!incomesByDay[date]) incomesByDay[date] = 0;
            incomesByDay[date] += income.incomeAmount;
        });
        monthlyData.expenses.forEach(expense => {
            const date = expense.expenseDate.split('T')[0]; // YYYY-MM-DD 형식
            if (!expensesByDay[date]) expensesByDay[date] = 0;
            expensesByDay[date] += expense.expenseAmount;
        });

        // 이번 달 총 수입/지출 업데이트
        const totalMonthlyIncome = monthlyData.incomes.reduce((sum, income) => sum + income.incomeAmount, 0);
        const totalMonthlyExpense = monthlyData.expenses.reduce((sum, expense) => sum + expense.expenseAmount, 0);
        monthlyTotalIncomeSpan.textContent = formatCurrency(totalMonthlyIncome);
        monthlyTotalExpenseSpan.textContent = formatCurrency(totalMonthlyExpense);

        let dayCounter = new Date(startDate);
        for (let i = 0; i < 42; i++) { // 6주 * 7일 = 42개 칸
            const dayDiv = document.createElement('div');
            dayDiv.classList.add('day');

            const dayNumSpan = document.createElement('span');
            dayNumSpan.classList.add('day-num');
            dayNumSpan.textContent = dayCounter.getDate();
            dayDiv.appendChild(dayNumSpan);

            // 해당 날짜의 수입/지출 금액 표시
            const dateKey = `${dayCounter.getFullYear()}-${String(dayCounter.getMonth() + 1).padStart(2, '0')}-${String(dayCounter.getDate()).padStart(2, '0')}`;
            const totalIncomeForDay = incomesByDay[dateKey] || 0;
            const totalExpenseForDay = expensesByDay[dateKey] || 0;

            const incomeRow = document.createElement('div');
            incomeRow.classList.add('income-row');
            incomeRow.innerHTML = `<span class="income-label">수입</span><span class="income-amount-display">${formatCurrency(totalIncomeForDay)}</span>`;
            dayDiv.appendChild(incomeRow);

            const expenseRow = document.createElement('div');
            expenseRow.classList.add('expense-row');
            expenseRow.innerHTML = `<span class="expense-label">지출</span><span class="expense-amount-display">${formatCurrency(totalExpenseForDay)}</span>`;
            dayDiv.appendChild(expenseRow);

            // 현재 월이 아닌 날짜는 다른 스타일 적용
            if (dayCounter.getMonth() !== month) {
                dayDiv.classList.add('other-month');
            }

            // 오늘 날짜 강조
            const today = new Date();
            if (dayCounter.getFullYear() === today.getFullYear() &&
                    dayCounter.getMonth() === today.getMonth() &&
                    dayCounter.getDate() === today.getDate()) {
                dayDiv.classList.add('current-day');
            }

            // 선택된 날짜 강조
            if (selectedDate &&
                    dayCounter.getFullYear() === selectedDate.getFullYear() &&
                    dayCounter.getMonth() === selectedDate.getMonth() &&
                    dayCounter.getDate() === selectedDate.getDate()) {
                dayDiv.classList.add('selected-day');
            }


            const clickedDateValue = new Date(dayCounter);


            // 날짜 클릭 이벤트 리스너
            dayDiv.addEventListener('click', () => {
                // 이전 선택된 날짜의 스타일 제거
                const previousSelected = document.querySelector('.day.selected-day');
                if (previousSelected) {
                    previousSelected.classList.remove('selected-day');
                }

                // 클릭된 날짜에 selected-day 클래스 추가
                dayDiv.classList.add('selected-day');

                selectedDate = clickedDateValue; // 캡처된 정확한 날짜 사용

                const selectedDateStringForInput = `${selectedDate.getFullYear()}-${String(selectedDate.getMonth() + 1).padStart(2, '0')}-${String(selectedDate.getDate()).padStart(2, '0')}`;
                document.getElementById('selected-income-date').value = selectedDateStringForInput;
                document.getElementById('selected-expense-date').value = selectedDateStringForInput;

                console.log('[CLICK] Final YYYY-MM-DD for input:', selectedDateStringForInput);
            });

            calendarGrid.appendChild(dayDiv);
            dayCounter.setDate(dayCounter.getDate() + 1); // 다음 날짜로 이동
        }
    }

    // ----------------------------------------------------------------------
    // DOMContentLoaded 이벤트 리스너를 하나만 유지
    document.addEventListener('DOMContentLoaded', async () => {
        await renderCalendar(); // 캘린더 렌더링이 완료된 후

        // 초기 로드 시 선택된 날짜 (오늘)를 숨겨진 필드에 설정
        const initialSelectedDateString = `${selectedDate.getFullYear()}-${String(selectedDate.getMonth() + 1).padStart(2, '0')}-${String(selectedDate.getDate()).padStart(2, '0')}`;
        document.getElementById('selected-income-date').value = initialSelectedDateString;
        document.getElementById('selected-expense-date').value = initialSelectedDateString;

        console.log('초기 로드 시 선택된 날짜 (오늘):', initialSelectedDateString);
    });
    // ----------------------------------------------------------------------


    // 이전 달 보기 버튼 클릭 이벤트
    prevMonthButton.addEventListener('click', () => {
        currentMonth.setMonth(currentMonth.getMonth() - 1);
        renderCalendar();
    });

    // 다음 달 보기
    nextMonthButton.addEventListener('click', () => {
        currentMonth.setMonth(currentMonth.getMonth() + 1);
        renderCalendar();
    });
</script>

</body>
</html>